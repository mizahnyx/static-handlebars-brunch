// Generated by CoffeeScript 1.6.3
(function() {
  var StaticHandlebarsCompiler, fs, glob, handlebars, mkdirp, sysPath,
    __hasProp = {}.hasOwnProperty;

  handlebars = require("handlebars");

  sysPath = require("path");

  fs = require("fs");

  glob = require("glob");

  mkdirp = require("mkdirp");

  module.exports = StaticHandlebarsCompiler = (function() {
    StaticHandlebarsCompiler.prototype.brunchPlugin = true;

    StaticHandlebarsCompiler.prototype.type = "template";

    StaticHandlebarsCompiler.prototype.extension = "hbs";

    function StaticHandlebarsCompiler(config) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
        _this = this;
      this.config = config;
      this.extension = (_ref = (_ref1 = this.config.plugins) != null ? (_ref2 = _ref1.static_handlebars) != null ? _ref2.extension : void 0 : void 0) != null ? _ref : "hbs";
      this.relAssetPath = (_ref3 = (_ref4 = this.config.plugins) != null ? (_ref5 = _ref4.static_handlebars) != null ? _ref5.asset : void 0 : void 0) != null ? _ref3 : "app/assets";
      this.relPartialPath = (_ref6 = (_ref7 = this.config.plugins) != null ? (_ref8 = _ref7.static_handlebars) != null ? _ref8.partial : void 0 : void 0) != null ? _ref6 : "app/templates";
      this.partials = {};
      glob("" + this.relPartialPath + "/_*." + this.extension, function(err, files) {
        if (err != null) {
          throw err;
        }
        return files.forEach(function(file) {
          var name;
          name = sysPath.basename(file, "." + _this.extension).substr(1);
          return fs.readFile(file, function(err, data) {
            if (err != null) {
              throw err;
            }
            return _this.partials[name] = data.toString('utf8');
          });
        });
      });
      null;
    }

    StaticHandlebarsCompiler.prototype.getHtmlFilePath = function(hbsFilePath, relAssetPath) {
      var newpath, relativeFilePath, relativeFilePathParts;
      relativeFilePathParts = hbsFilePath.split(sysPath.sep);
      relativeFilePathParts.push(relativeFilePathParts.pop().slice(0, -this.extension.length) + "html");
      relativeFilePath = sysPath.join.apply(this, relativeFilePathParts.slice(1));
      newpath = sysPath.join(relAssetPath, relativeFilePath);
      return newpath;
    };

    StaticHandlebarsCompiler.prototype.compile = function(data, path, callback) {
      var basename, dirname, err, error, html, htmlFilePath, name, result, template, _ref;
      try {
        basename = sysPath.basename(path, ".hbs");
        _ref = this.partials;
        for (name in _ref) {
          if (!__hasProp.call(_ref, name)) continue;
          template = _ref[name];
          handlebars.registerPartial(name, template);
        }
        template = handlebars.compile(data);
        html = template();
        htmlFilePath = this.getHtmlFilePath(path, this.relAssetPath);
        dirname = sysPath.dirname(htmlFilePath);
        mkdirp(dirname, '0775', function(err) {
          if (err != null) {
            throw err;
          }
          return fs.writeFile(htmlFilePath, html, function(err) {
            if (err != null) {
              throw err;
            }
          });
        });
        return result = '';
      } catch (_error) {
        err = _error;
        return error = err;
      } finally {
        callback(error, result);
      }
    };

    return StaticHandlebarsCompiler;

  })();

}).call(this);
